https://res.cloudinary.com/varun-next/image/upload/v1711708574/propertypulse/a1_hlwbrf.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711708574/propertypulse/a2_kaj95u.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711708574/propertypulse/a3_semacx.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711708647/propertypulse/a4_pxhlzp.jpg

https://res.cloudinary.com/varun-next/image/upload/v1711708677/propertypulse/b1_g9maqw.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711708677/propertypulse/b2_cyefsb.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711708678/propertypulse/b3_n68fiv.jpg

["https://res.cloudinary.com/varun-next/image/upload/v1711709207/propertypulse/c1_s1461u.jpg",
https://res.cloudinary.com/varun-next/image/upload/v1711709208/propertypulse/c2_r8torr.jpg",
https://res.cloudinary.com/varun-next/image/upload/v1711709213/propertypulse/c3_c7zt4w.jpg",
https://res.cloudinary.com/varun-next/image/upload/v1711709208/propertypulse/c4_pjv7vt.jpg]

https://res.cloudinary.com/varun-next/image/upload/v1711709224/propertypulse/d1_x9sl5y.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711709226/propertypulse/d2_fuuhqx.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711709230/propertypulse/d3_r7sfme.jpg

https://res.cloudinary.com/varun-next/image/upload/v1711709222/propertypulse/e1_zgyjib.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711709222/propertypulse/e2_uhla8b.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711709229/propertypulse/e3_qplsrg.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711709233/propertypulse/e4_zonhh7.jpg

https://res.cloudinary.com/varun-next/image/upload/v1711709239/propertypulse/f1_kifz8q.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711709233/propertypulse/f2_k7kheb.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711709235/propertypulse/f3_isdqfy.jpg

https://res.cloudinary.com/varun-next/image/upload/v1711709232/propertypulse/g1_qalvis.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711709239/propertypulse/g2_w8yhgn.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711709236/propertypulse/g3_ph5ekn.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711709238/propertypulse/g4_f06tqu.jpg

https://res.cloudinary.com/varun-next/image/upload/v1711709255/propertypulse/h1_yqfltx.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711709255/propertypulse/h2_xohv6z.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711709258/propertypulse/h3_ozvlun.jpg

https://res.cloudinary.com/varun-next/image/upload/v1711709260/propertypulse/i1_vzebqi.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711709263/propertypulse/i2_hyqvhx.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711709262/propertypulse/i3_jbyqgn.jpg

https://res.cloudinary.com/varun-next/image/upload/v1711709263/propertypulse/j1_zq5tfg.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711709261/propertypulse/j2_ofx5ox.jpg
https://res.cloudinary.com/varun-next/image/upload/v1711709263/propertypulse/j3_y5wxgm.jpg

const PropertySchema = new Schema(
{
owner: {
type: Schema.Types.ObjectId,
ref: 'User',
required: true,
},
name: {
type: String,
required: true,
},
type: {
type: String,
required: true,
},
description: {
type: String,
},
location: {
street: {
type: String,
},
city: {
type: String,
},
state: {
type: String,
},
zipcode: {
type: String,
},
},
beds: {
type: Number,
required: true,
},
baths: {
type: Number,
required: true,
},
square_feet: {
type: Number,
required: true,
},
amenities: [
{
type: String,
},
],
rates: {
nightly: {
type: Number,
},
weekly: {
type: Number,
},
monthly: {
type: Number,
},
},
seller_info: {
name: {
type: String,
},
email: {
type: String,
},
phone: {
type: String,
},
},
images: [
{
type: String,
},
],
is_featured: {
type: Boolean,
default: false,
},
},
{
timestamps: true,
}
);

const Property = models.Property || model('Property', PropertySchema);

export default Property;

export const GET = async (request, { params }) => {
try {
await connectDB();

    const userId = params.userId;

    if (!userId) {
      return new Response('User Id is required', {
        status: 401,
        message: 'Please login',
      });
    }

    const properties = await Property.find({
      owner: userId,
    });

    if (!properties) {
      return new Response('properties not found', { status: 404 });
    }

    return new Response(JSON.stringify(properties), {
      status: 200,
    });

} catch (error) {
console.log(error);
return new Response('Error on finding property', { status: 500 });
}
};

I'm getting empty array

http://localhost:3000/api/properties/user/660519b135bbcac7449db036

User ID: 660519b135bbcac7449db036
Properties: []
